x <- 1:30
x %in% 1
x %in% 7
!x %in% 7
x <- 1:10
x[!x %in% 11]
library(roxygen2)
roxygen2::roxygenise()
install.packages("roxygen2")
install.packages("roxygen2")
roxygen2::roxygenise()
library(roxygen2)
roxygen2::roxygenise()
vec <- c(1, 2, 3, 4)
vec %in% c(1, 2)
vec %in% c(2, 4)
! vec %in% c(2, 4)
library(roxygen2)
devtools::document()
devtools::create()
devtools::install_local("sawr")
devtools::document()
devtools::document("sawr")
getwd()
setwd("..")
devtools::document("sawr")
update("roxygen2")
devtools::install_github("klutometis/roxygen", force=TRUE)
devtools::document("sawr")
roxygen2
package(roxygen2)
getwd()
setwd("sawr")
devtools::document()
devtools::document()
setwd("..")
devtools::create("sawr")
usethis::create_package("sawr")
getwd()
getwd()
devtools::document("sawr")
remove.packages("sawr")
library("sawr")
devtools::install_local('sawr')
getwd()
devtools::create("sawr")
devtools::document()
devtools::install_github("timmens/sawr")
library(devtools)
devtools::install_github("timmens/sawr")
sawr
getwd()
devtools::document("sawr")
devtools::install_local("sawr")
devtools::install_local("sawr", force = TRUE)
library("sawr")
remove.packages("sawr")
library("sawr")
library("sawr")
remove.packages("sawr")
saw_fun <- function(formula, dot = FALSE, s.thresh = NULL) {
results <- BKSGL.pdm.default(formula, s.thresh)
x.all.matrix <- results$x.all.matrix
y.matrix     <- results$y.matrix
tausList     <- results$tausList
T <- nrow(y.matrix)
tausList <- lapply(tausList, function(tauVec) tauVec[!tauVec %in% c(1, T)])
tausList <- lapply(tausList, function(tauVec) {
ifelse(length(tauVec) == 0, NA, tauVec)
})
# experiment ------------------------------------------------
tausList <- lapply(tausList, function(tau_vect) tau_vect - 1)
# -----------------------------------------------------------
linear_model_data <- construct_data_for_linear_model(y.matrix, x.all.matrix,
tausList, dot)
lm_fit_model      <- lm.fit(linear_model_data$X, linear_model_data$Y)
coeff             <- lm_fit_model$coefficients
posit   <- cumsum(sapply(tausList, function(tau_vect) sum(!is.na(tau_vect)) + 1))
posit   <- c(0, posit)
coeffList <- list()
for (i in seq_along(posit)[-1]) {
coeffList[[i-1]] <- coeff[(posit[i-1] + 1):posit[i]]
}
#tausList <- lapply(tausList, function(tau_vect) tau_vect - 1)
betaMat  <- construct_beta(coeffList, tausList, nrow(x.all.matrix))
list(betaMat = betaMat, tausList = tausList, coeffList = coeffList,
X = linear_model_data$X)
}
library(roxygen2)
library(devtools)
devtools::document("../sawr")
character(10)
tmp = character(10)
tmp[1]
sawr::saw_fun
devtools::document("../sawr")
source("../../r_dgp/dgp.R")
dgp1_autocorr(17, 10)
data <- dgp1_autocorr(10, 10)
rm(list = ls())
source('~/sciebo/whf/kneip/simwavelets/r_dgp/monte_carlo_study_dgp1_autocorr.R', echo=TRUE)
source('~/sciebo/whf/kneip/simwavelets/r_dgp/monte_carlo_study_dgp1_autocorr.R', echo=TRUE)
rm(list = ls())
rm(list = ls())
#devtools::install_github("timmens/sawr")
library("sawr")
library("foreach")
library("doParallel")
## Reading in all dgp definitions
source("../../r_dgp/dgp.R")
N     <- c(50, 100, 200, 300)
T     <- 2 ^ c(5, 6, 7) + 1
nSim  <- 500
nN    <- length(N)
nT    <- length(T)
s_est1 <- numeric(nN * nT)
s_est2 <- numeric(nN * nT)
mise1  <- numeric(nN * nT)
mise2  <- numeric(nN * nT)
hd1    <- numeric(nN * nT)
hd2    <- numeric(nN * nT)
hd     <- numeric(nN * nT)
s_01   <- numeric(nN * nT)
s_02   <- numeric(nN * nT)
rng_number <- 123
set.seed(rng_number)
cl <- parallel::makeCluster(4)
doParallel::registerDoParallel(cl)
nIter <- nT * nN
starting_time <- Sys.time()
for (t in 1:nT) {
t_tmp <- T[t]
for (n in 1:nN) {
n_tmp <- N[n]
cat(sprintf("dgp = %d; n = %d; t = %d\n", 1, n_tmp, t_tmp))
tmp_result_matrix <- foreach::foreach(r = 1:nSim, .combine = cbind) %do% {
data  <- dgp1_autocorr(t_tmp, n_tmp, sderr_e=sqrt(0.75))
beta1 <- data$beta1
beta2 <- data$beta2
tau1  <- data$tau1
tau2  <- data$tau2
results  <- sawr::saw_fun(data$Y ~ data$X1 + data$X2)
tausList <- results$tausList
s_est_tmp_1 <- sum(!is.na(tausList[[1]]))
s_est_tmp_2 <- sum(!is.na(tausList[[2]]))
mise_tmp_1   <- mean((beta1 - results$betaMat[, 1])^2)
mise_tmp_2   <- mean((beta2 - results$betaMat[, 2])^2)
hd_tmp1   <- dist_hausdorff(tau1, tausList[[1]])
hd_tmp2   <- dist_hausdorff(tau2, tausList[[2]])
hd_tmp    <- dist_hausdorff(c(tau1, tau2), unlist(tausList))
tmp_results <- c(s_est_tmp_1,
s_est_tmp_2,
mise_tmp_1,
mise_tmp_2,
ifelse(is.na(hd_tmp1), NA_real_, hd_tmp1),
ifelse(is.na(hd_tmp2), NA_real_, hd_tmp2),
ifelse(is.na(hd_tmp), NA_real_, hd_tmp))
tmp_results
}
index        <- (t - 1) * nN + n
s_est1[index] <- sum(tmp_result_matrix[1, ]) / nSim
s_est2[index] <- sum(tmp_result_matrix[2, ]) / nSim
mise1[index]  <- mean(tmp_result_matrix[3, ], na.rm = TRUE)
mise2[index]  <- mean(tmp_result_matrix[4, ], na.rm = TRUE)
hd1[index]    <- mean(tmp_result_matrix[5, ], na.rm = TRUE)
hd2[index]    <- mean(tmp_result_matrix[6, ], na.rm = TRUE)
hd[index]     <- mean(tmp_result_matrix[7, ], na.rm = TRUE)
s_01[index]   <- sum(is.na(tmp_result_matrix[5, ])) / nSim
s_02[index]   <- sum(is.na(tmp_result_matrix[6, ])) / nSim
cat(sprintf("%2.2f percent done\n", index / nIter * 100))
}
}
parallel::stopCluster(cl)
params    <- list(N = N, T = T)
result_df <- expand.grid(params)[c(2, 1)]
additional_info      <- character(nrow(result_df))
additional_info[1:3] <- c(paste0("nsim = ", nSim),
paste0("seed = ", rng_number),
paste0("ellapsed time = ",
Sys.time() - starting_time))
result_df$s_est1 <- s_est1
result_df$s_est2 <- s_est2
result_df$mise1  <- mise1
result_df$mise2  <- mise2
result_df$hd1    <- hd1
result_df$hd2    <- hd2
result_df$hd     <- hd
result_df$s_01   <- s_01
result_df$s_02   <- s_02
result_df$additional_info <- additional_info
filename <-
paste0(paste0("../r_simulation_results/rsimulaton-dgp1-alt-",
gsub(" ", "-", gsub(":", "-", as.character(Sys.time())))), ".csv")
write.csv(result_df, file = filename)
result_df
filename <-
paste0(paste0("../../r_simulation_results/rsimulaton-dgp1-alt-",
gsub(" ", "-", gsub(":", "-", as.character(Sys.time())))), ".csv")
write.csv(result_df, file = filename)
